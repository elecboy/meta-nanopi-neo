From f450f87ffa6c98453316058b4bff219b43fec236 Mon Sep 17 00:00:00 2001
From: changzhijie <elecboy@126.com>
Date: Sun, 17 Jun 2018 15:17:58 +0800
Subject: [PATCH 07/13] fix rx8010-rtc-wakeup

---
 drivers/rtc/rtc-rx8010.c | 37 +++++++++++++++++++++++++++++--------
 1 file changed, 29 insertions(+), 8 deletions(-)

diff --git a/drivers/rtc/rtc-rx8010.c b/drivers/rtc/rtc-rx8010.c
index 7ddc22eb5b0f..d345ae6adb8b 100644
--- a/drivers/rtc/rtc-rx8010.c
+++ b/drivers/rtc/rtc-rx8010.c
@@ -337,7 +337,7 @@ static int rx8010_set_alarm(struct device *dev, struct rtc_wkalrm *t)
 			rx8010->ctrlreg |= RX8010_CTRL_UIE;
 		if (rx8010->rtc->aie_timer.enabled)
 			rx8010->ctrlreg |=
-				(RX8010_CTRL_AIE | RX8010_CTRL_UIE);
+				(RX8010_CTRL_AIE);
 
 		err = i2c_smbus_write_byte_data(rx8010->client, RX8010_CTRL,
 						rx8010->ctrlreg);
@@ -431,6 +431,9 @@ static int rx8010_ioctl(struct device *dev, unsigned int cmd, unsigned long arg)
 static struct rtc_class_ops rx8010_rtc_ops = {
 	.read_time = rx8010_get_time,
 	.set_time = rx8010_set_time,
+	.read_alarm = rx8010_read_alarm,
+	.set_alarm = rx8010_set_alarm,
+	.alarm_irq_enable = rx8010_alarm_irq_enable,
 	.ioctl = rx8010_ioctl,
 };
 
@@ -440,6 +443,18 @@ static int rx8010_probe(struct i2c_client *client,
 	struct i2c_adapter *adapter = to_i2c_adapter(client->dev.parent);
 	struct rx8010_data *rx8010;
 	int err = 0;
+	bool			rx8010_can_wakeup_device = false;
+	/*
+	 * For devices with no IRQ directly connected to the SoC, the RTC chip
+	 * can be forced as a wakeup source by stating that explicitly in
+	 * the device's .dts file using the "wakeup-source" boolean property.
+	 * If the "wakeup-source" property is set, don't request an IRQ.
+	 * This will guarantee the 'wakealarm' sysfs entry is available on the device,
+	 * if supported by the RTC.
+	 */
+	if (of_property_read_bool(client->dev.of_node,
+						 "wakeup-source"))
+	  rx8010_can_wakeup_device = true;
 
 	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA
 		| I2C_FUNC_SMBUS_I2C_BLOCK)) {
@@ -468,16 +483,22 @@ static int rx8010_probe(struct i2c_client *client,
 
 		if (err) {
 			dev_err(&client->dev, "unable to request IRQ\n");
+                        device_set_wakeup_capable(&client->dev, false);
 			client->irq = 0;
-		} else {
-			rx8010_rtc_ops.read_alarm = rx8010_read_alarm;
-			rx8010_rtc_ops.set_alarm = rx8010_set_alarm;
-			rx8010_rtc_ops.alarm_irq_enable = rx8010_alarm_irq_enable;
 		}
-	}
 
-	rx8010->rtc = devm_rtc_device_register(&client->dev, client->name,
-		&rx8010_rtc_ops, THIS_MODULE);
+		rx8010->rtc = devm_rtc_device_register(&client->dev, client->name,
+						       &rx8010_rtc_ops, THIS_MODULE);
+	}
+	else if (rx8010_can_wakeup_device) {
+	    dev_info(&client->dev,
+		     "'wakeup-source' is set, request for an IRQ is disabled!\n");
+	    /* We cannot support UIE mode if we do not have an IRQ line */
+	    device_set_wakeup_capable(&client->dev, true);
+	    rx8010->rtc = devm_rtc_device_register(&client->dev, client->name,
+						   &rx8010_rtc_ops, THIS_MODULE);
+	    rx8010->rtc->uie_unsupported = 1;
+	}
 
 	if (IS_ERR(rx8010->rtc)) {
 		dev_err(&client->dev, "unable to register the class device\n");
-- 
2.17.1

